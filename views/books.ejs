<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <title>Books - Library Management</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="/output.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>
<body class="min-h-screen bg-base-100">
    <!-- Navigation -->
    <div class="navbar bg-primary text-primary-content shadow-lg sticky top-0 z-40">
        <div class="navbar-start">
            <div class="dropdown">
                <div tabindex="0" role="button" class="btn btn-ghost lg:hidden">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8m-8 6h16"></path>
                    </svg>
                </div>
                <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-primary rounded-box w-52">
                    <li><a href="/" class="text-primary-content"><i class="fas fa-home mr-2"></i>Home</a></li>
                    <li><a href="/books" class="text-primary-content font-bold"><i class="fas fa-book mr-2"></i>Books</a></li>
                    <li><a href="/members" class="text-primary-content"><i class="fas fa-users mr-2"></i>Members</a></li>
                    <li><a href="/borrowing" class="text-primary-content"><i class="fas fa-exchange-alt mr-2"></i>Borrowing</a></li>
                    <li><a href="/analytics" class="text-primary-content"><i class="fas fa-chart-line mr-2"></i>Analytics</a></li>
                </ul>
            </div>
            <a href="/" class="btn btn-ghost text-xl">
                <i class="fas fa-book-open mr-2"></i>
                Library Management
            </a>
        </div>
        <div class="navbar-center hidden lg:flex">
            <ul class="menu menu-horizontal px-1">
                <li><a href="/" class="text-primary-content"><i class="fas fa-home mr-2"></i>Home</a></li>
                <li><a href="/books" class="text-primary-content font-bold"><i class="fas fa-book mr-2"></i>Books</a></li>
                <li><a href="/members" class="text-primary-content"><i class="fas fa-users mr-2"></i>Members</a></li>
                <li><a href="/borrowing" class="text-primary-content"><i class="fas fa-exchange-alt mr-2"></i>Borrowing</a></li>
                <li><a href="/analytics" class="text-primary-content"><i class="fas fa-chart-line mr-2"></i>Analytics</a></li>
            </ul>
        </div>
        <div class="navbar-end">
            <div class="form-control">
                <input type="text" id="searchBooks" placeholder="Search books..." class="input input-bordered input-sm w-full max-w-xs" />
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4 py-6">
        <!-- Header Section -->
        <div class="flex flex-col lg:flex-row lg:justify-between lg:items-center mb-8">
            <div>
                <h1 class="text-4xl font-bold text-base-content mb-2">
                    <i class="fas fa-book-open text-primary mr-3"></i>
                    Library Books
                </h1>
                <p class="text-base-content/70">Manage your library's book collection</p>
            </div>
            <div class="flex flex-col sm:flex-row gap-3 mt-4 lg:mt-0">
                <button id="openAddBookModal" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus mr-2"></i>
                    Add New Book
                </button>
                <div class="dropdown dropdown-end">
                    <div tabindex="0" role="button" class="btn btn-outline btn-lg">
                        <i class="fas fa-filter mr-2"></i>
                        Filter
                    </div>
                    <div tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                        <li><a id="filterAll" class="active"><i class="fas fa-list mr-2"></i>All Books</a></li>
                        <li><a id="filterRecent"><i class="fas fa-clock mr-2"></i>Recent (2020+)</a></li>
                        <li><a id="filterClassic"><i class="fas fa-scroll mr-2"></i>Classic (Pre-2000)</a></li>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            <div class="stat bg-primary text-primary-content rounded-box shadow-lg">
                <div class="stat-figure">
                    <i class="fas fa-book text-3xl opacity-80"></i>
                </div>
                <div class="stat-title text-primary-content/80">Total Books</div>
                <div class="stat-value" id="totalBooksCount">0</div>
                <div class="stat-desc text-primary-content/60">In collection</div>
            </div>
            <div class="stat bg-secondary text-secondary-content rounded-box shadow-lg">
                <div class="stat-figure">
                    <i class="fas fa-user-edit text-3xl opacity-80"></i>
                </div>
                <div class="stat-title text-secondary-content/80">Authors</div>
                <div class="stat-value" id="uniqueAuthorsCount">0</div>
                <div class="stat-desc text-secondary-content/60">Unique authors</div>
            </div>
            <div class="stat bg-accent text-accent-content rounded-box shadow-lg">
                <div class="stat-figure">
                    <i class="fas fa-calendar text-3xl opacity-80"></i>
                </div>
                <div class="stat-title text-accent-content/80">Latest</div>
                <div class="stat-value text-2xl" id="latestYear">2024</div>
                <div class="stat-desc text-accent-content/60">Most recent</div>
            </div>
        </div>

        <!-- View Toggle -->
        <div class="flex justify-between items-center mb-6">
            <div class="tabs tabs-boxed bg-base-200">
                <button id="cardView" class="tab tab-active">
                    <i class="fas fa-th mr-2"></i>Cards
                </button>
                <button id="tableView" class="tab">
                    <i class="fas fa-table mr-2"></i>Table
                </button>
            </div>
            <div class="text-sm text-base-content/60">
                Showing <span id="visibleCount">0</span> of <span id="totalCount">0</span> books
            </div>
        </div>

        <!-- Books Content -->
        <div id="booksContainer">
            <!-- Card View -->
            <div id="cardViewContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Books will be loaded here dynamically -->
            </div>

            <!-- Table View -->
            <div id="tableViewContainer" class="overflow-x-auto bg-base-100 rounded-lg shadow-lg" style="display: none;">
                <table class="table table-zebra w-full">
                    <thead class="bg-base-200">
                        <tr>
                            <th class="text-base-content font-bold">
                                <i class="fas fa-book mr-2"></i>Title
                            </th>
                            <th class="text-base-content font-bold">
                                <i class="fas fa-user mr-2"></i>Author
                            </th>
                            <th class="text-base-content font-bold">
                                <i class="fas fa-calendar mr-2"></i>Year
                            </th>
                            <th class="text-base-content font-bold">
                                <i class="fas fa-tags mr-2"></i>Genres
                            </th>
                            <th class="text-base-content font-bold">
                                <i class="fas fa-info-circle mr-2"></i>Description
                            </th>
                            <th class="text-base-content font-bold">
                                <i class="fas fa-cogs mr-2"></i>Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody id="tableBody">
                        <!-- Books will be loaded here dynamically -->
                    </tbody>
                </table>
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="text-center py-16" style="display: none;">
                <div class="text-6xl text-base-content/20 mb-4">
                    <i class="fas fa-book-open"></i>
                </div>
                <h3 class="text-2xl font-bold text-base-content mb-2">No books found</h3>
                <p class="text-base-content/60 mb-6">Start building your library by adding your first book</p>
                <button class="btn btn-primary btn-lg" onclick="document.getElementById('openAddBookModal').click()">
                    <i class="fas fa-plus mr-2"></i>
                    Add Your First Book
                </button>
            </div>
        </div>
    </div>

    <!-- Add Book Modal -->
    <dialog id="addBookModal" class="modal">
        <div class="modal-box w-11/12 max-w-2xl">
            <form method="dialog">
                <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
            </form>
            <h2 class="font-bold text-2xl mb-6">
                <i class="fas fa-plus-circle text-primary mr-2"></i>
                Add New Book
            </h2>
            
            <% if (typeof errors !== 'undefined' && errors.length && typeof editMode === 'undefined') { %>
                <div class="alert alert-error mb-6">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div>
                        <h3 class="font-bold">Please fix the following errors:</h3>
                        <ul class="list-disc list-inside">
                            <% errors.forEach(function(error) { %>
                                <li><%= error %></li>
                            <% }); %>
                        </ul>
                    </div>
                </div>
            <% } %>

            <form action="/api/books/add" method="POST" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="form-control">
                        <label class="label" for="title">
                            <span class="label-text font-semibold">
                                <i class="fas fa-book mr-2 text-primary"></i>Title
                            </span>
                        </label>
                        <input type="text" id="title" name="Title" class="input input-bordered focus:input-primary" required>
                    </div>
                    <div class="form-control">
                        <label class="label" for="author">
                            <span class="label-text font-semibold">
                                <i class="fas fa-user mr-2 text-primary"></i>Author
                            </span>
                        </label>
                        <input type="text" id="author" name="Author" class="input input-bordered focus:input-primary" required>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="form-control">
                        <label class="label" for="ISBN">
                            <span class="label-text font-semibold">
                                <i class="fas fa-barcode mr-2 text-primary"></i>ISBN
                            </span>
                        </label>
                        <div class="join w-full">
                            <input type="text" id="ISBN" name="ISBN" class="input input-bordered join-item flex-1 focus:input-primary" required>
                            <button type="button" id="generateISBN" class="btn btn-secondary join-item">
                                <i class="fas fa-random mr-2"></i>Generate
                            </button>
                        </div>
                    </div>
                    <div class="form-control">
                        <label class="label" for="publicationYear">
                            <span class="label-text font-semibold">
                                <i class="fas fa-calendar mr-2 text-primary"></i>Publication Year
                            </span>
                        </label>
                        <input type="number" id="publicationYear" name="PublicationYear" class="input input-bordered focus:input-primary" min="1000" max="2030" required>
                    </div>
                </div>

                <div class="form-control">
                    <label class="label" for="description">
                        <span class="label-text font-semibold">
                            <i class="fas fa-align-left mr-2 text-primary"></i>Description
                        </span>
                    </label>
                    <textarea id="description" name="Description" class="textarea textarea-bordered focus:textarea-primary h-24" placeholder="Enter book description..."></textarea>
                </div>

                <!-- Genre Selection -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text font-semibold">
                            <i class="fas fa-tags mr-2 text-primary"></i>Genres
                        </span>
                    </label>
                    <div class="space-y-3">
                        <!-- Genre Input -->
                        <div class="join w-full genre-input-section">
                            <input type="text" 
                                   id="genreInput" 
                                   class="input input-bordered join-item flex-1 focus:input-primary" 
                                   placeholder="Type a genre (e.g., Fiction, Mystery, Romance)..."
                                   maxlength="50">
                            <button type="button" 
                                    id="addGenreBtn" 
                                    class="btn btn-secondary join-item" 
                                    title="Add genre to book">
                                <i class="fas fa-plus mr-1"></i>Add
                            </button>
                        </div>
                        
                        <!-- Selected Genres Display -->
                        <div class="min-h-[40px] p-3 border-2 border-base-300 rounded-lg bg-base-50">
                            <div id="selectedGenres" class="flex flex-wrap gap-2">
                                <span class="text-sm text-base-content/60 italic" id="noGenresText">No genres selected</span>
                            </div>
                        </div>
                        
                        <!-- Available Genres (populated via API) -->
                        <div class="collapse collapse-arrow bg-base-200">
                            <input type="checkbox" />
                            <div class="collapse-title text-sm font-medium">
                                <i class="fas fa-list mr-2"></i>Choose from existing genres
                            </div>
                            <div class="collapse-content">
                                <div id="availableGenres" class="flex flex-wrap gap-2 pt-2">
                                    <!-- Will be populated via JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Hidden inputs for genres -->
                    <div id="genreInputs"></div>
                </div>

                <div class="modal-action">
                    <button type="button" class="btn btn-outline" onclick="document.getElementById('addBookModal').close()">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save mr-2"></i>Add Book
                    </button>
                </div>
            </form>
        </div>
    </dialog>
    <!-- Edit Book Modal -->
    <dialog id="editBookModal" class="modal">
        <div class="modal-box w-11/12 max-w-2xl">
            <form method="dialog">
                <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
            </form>
            <h2 class="font-bold text-2xl mb-6">
                <i class="fas fa-edit text-primary mr-2"></i>
                Edit Book
            </h2>
            
            <% if (typeof errors !== 'undefined' && errors.length && typeof editMode !== 'undefined') { %>
                <div class="alert alert-error mb-6">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div>
                        <h3 class="font-bold">Please fix the following errors:</h3>
                        <ul class="list-disc list-inside">
                            <% errors.forEach(function(error) { %>
                                <li><%= error %></li>
                            <% }); %>
                        </ul>
                    </div>
                </div>
            <% } %>

            <form id="editBookForm" action="/api/books/edit" method="POST" class="space-y-4">
                <input type="hidden" id="editISBN" name="ISBN">
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="form-control">
                        <label class="label" for="editTitle">
                            <span class="label-text font-semibold">
                                <i class="fas fa-book mr-2 text-primary"></i>Title
                            </span>
                        </label>
                        <input type="text" id="editTitle" name="Title" class="input input-bordered focus:input-primary" required>
                    </div>
                    <div class="form-control">
                        <label class="label" for="editAuthor">
                            <span class="label-text font-semibold">
                                <i class="fas fa-user mr-2 text-primary"></i>Author
                            </span>
                        </label>
                        <input type="text" id="editAuthor" name="Author" class="input input-bordered focus:input-primary" required>
                    </div>
                </div>

                <div class="form-control">
                    <label class="label" for="editPublicationYear">
                        <span class="label-text font-semibold">
                            <i class="fas fa-calendar mr-2 text-primary"></i>Publication Year
                        </span>
                    </label>
                    <input type="number" id="editPublicationYear" name="PublicationYear" class="input input-bordered focus:input-primary" min="1000" max="2030" required>
                </div>

                <div class="form-control">
                    <label class="label" for="editDescription">
                        <span class="label-text font-semibold">
                            <i class="fas fa-align-left mr-2 text-primary"></i>Description
                        </span>
                    </label>
                    <textarea id="editDescription" name="Description" class="textarea textarea-bordered focus:textarea-primary h-24" placeholder="Enter book description..."></textarea>
                </div>

                <!-- Genre Selection for Edit -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text font-semibold">
                            <i class="fas fa-tags mr-2 text-primary"></i>Genres
                        </span>
                    </label>
                    <div class="space-y-3">
                        <!-- Genre Input -->
                        <div class="join w-full genre-input-section">
                            <input type="text" 
                                   id="editGenreInput" 
                                   class="input input-bordered join-item flex-1 focus:input-primary" 
                                   placeholder="Type a genre (e.g., Fiction, Mystery, Romance)..."
                                   maxlength="50">
                            <button type="button" 
                                    id="addEditGenreBtn" 
                                    class="btn btn-secondary join-item" 
                                    title="Add genre to book">
                                <i class="fas fa-plus mr-1"></i>Add
                            </button>
                        </div>
                        
                        <!-- Selected Genres Display -->
                        <div class="min-h-[40px] p-3 border-2 border-base-300 rounded-lg bg-base-50">
                            <div id="editSelectedGenres" class="flex flex-wrap gap-2">
                                <span class="text-sm text-base-content/60 italic" id="editNoGenresText">No genres selected</span>
                            </div>
                        </div>
                        
                        <!-- Available Genres (populated via API) -->
                        <div class="collapse collapse-arrow bg-base-200">
                            <input type="checkbox" />
                            <div class="collapse-title text-sm font-medium">
                                <i class="fas fa-list mr-2"></i>Choose from existing genres
                            </div>
                            <div class="collapse-content">
                                <div id="editAvailableGenres" class="flex flex-wrap gap-2 pt-2">
                                    <!-- Will be populated via JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Hidden inputs for genres -->
                    <div id="editGenreInputs"></div>
                </div>

                <div class="modal-action">
                    <button type="button" class="btn btn-outline" onclick="document.getElementById('editBookModal').close()">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save mr-2"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </dialog>

    <!-- Delete Confirmation Modal -->
    <dialog id="deleteBookModal" class="modal">
        <div class="modal-box">
            <h3 class="font-bold text-lg text-error">
                <i class="fas fa-exclamation-triangle mr-2"></i>
                Delete Book
            </h3>
            <div class="py-4">
                <div class="flex items-center space-x-3 mb-4">
                    <div class="avatar">
                        <div class="w-12 h-12 rounded-lg bg-error/10 flex items-center justify-center">
                            <i class="fas fa-book text-error text-xl"></i>
                        </div>
                    </div>
                    <div>
                        <p class="font-semibold text-base-content" id="deleteBookTitle">Book Title</p>
                        <p class="text-base-content/70" id="deleteBookAuthor">by Author Name</p>
                    </div>
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div>
                        <h4 class="font-bold">Warning!</h4>
                        <p>This action cannot be undone. The book will be permanently removed from your library.</p>
                    </div>
                </div>
            </div>
            <div class="modal-action">
                <button type="button" class="btn btn-outline" onclick="document.getElementById('deleteBookModal').close()">
                    <i class="fas fa-times mr-2"></i>Cancel
                </button>
                <button type="button" id="confirmDeleteBtn" class="btn btn-error">
                    <i class="fas fa-trash mr-2"></i>Delete Book
                </button>
            </div>
        </div>
        <form method="dialog" class="modal-backdrop">
            <button>close</button>
        </form>
    </dialog>

    <!-- Book Details Modal -->
    <dialog id="bookDetailsModal" class="modal">
        <div class="modal-box w-11/12 max-w-4xl max-h-[90vh] overflow-y-auto">
            <!-- Header -->
            <div class="flex items-start justify-between mb-6">
                <div class="flex-1">
                    <h2 class="font-bold text-2xl mb-2" id="detailBookTitle">Book Title</h2>
                    <p class="text-lg text-base-content/80" id="detailBookAuthor">by Author Name</p>
                </div>
                <div class="flex flex-col items-end gap-2">
                    <div id="detailBookStatus" class="badge badge-success">
                        <i class="fas fa-check-circle mr-1"></i>Available
                    </div>
                    <div class="text-sm text-base-content/60" id="detailBookYear">2023</div>
                </div>
            </div>

            <!-- Book Information Cards -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                <!-- Basic Info Card -->
                <div class="card bg-base-200 shadow-sm">
                    <div class="card-body p-4">
                        <h3 class="card-title text-lg mb-3">
                            <i class="fas fa-info-circle text-primary mr-2"></i>Book Information
                        </h3>
                        <div class="space-y-2">
                            <div class="flex justify-between">
                                <span class="font-medium">ISBN:</span>
                                <span class="font-mono text-sm" id="detailBookISBN">978-1234567890</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="font-medium">Publication Year:</span>
                                <span id="detailBookYearFull">2023</span>
                            </div>
                            <div>
                                <span class="font-medium block mb-2">Genres:</span>
                                <div id="detailBookGenres" class="flex flex-wrap gap-1">
                                    <span class="badge badge-secondary">Fiction</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Statistics Card -->
                <div class="card bg-base-200 shadow-sm">
                    <div class="card-body p-4">
                        <h3 class="card-title text-lg mb-3">
                            <i class="fas fa-chart-bar text-secondary mr-2"></i>Rental Statistics
                        </h3>
                        <div class="space-y-2">
                            <div class="flex justify-between">
                                <span class="font-medium">Total Rentals:</span>
                                <span class="font-bold" id="detailTotalRentals">0</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="font-medium">Current Status:</span>
                                <span class="font-medium" id="detailCurrentStatus">Available</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="font-medium">Copies Available:</span>
                                <span class="text-sm text-base-content/60">1 of 1</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Description -->
            <div class="mb-6">
                <h3 class="font-bold text-lg mb-3">
                    <i class="fas fa-align-left text-accent mr-2"></i>Description
                </h3>
                <div class="bg-base-200 p-4 rounded-lg">
                    <p id="detailBookDescription" class="text-base-content/80 leading-relaxed">
                        Book description will appear here...
                    </p>
                </div>
            </div>

            <!-- Rental Timeline -->
            <div class="mb-4">
                <h3 class="font-bold text-lg mb-3">
                    <i class="fas fa-history text-info mr-2"></i>Rental History Timeline
                </h3>
                <div class="bg-base-200 p-4 rounded-lg">
                    <div id="rentalTimeline">
                        <!-- Timeline will be populated by JavaScript -->
                        <div class="text-center py-8">
                            <div class="loading loading-spinner loading-md text-primary"></div>
                            <p class="mt-2 text-base-content/60">Loading timeline...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Actions -->
            <div class="modal-action">
                <button type="button" class="btn btn-outline" onclick="document.getElementById('bookDetailsModal').close()">
                    <i class="fas fa-times mr-2"></i>Close
                </button>
            </div>
        </div>
        <form method="dialog" class="modal-backdrop">
            <button>close</button>
        </form>
    </dialog>

    <style>
        /* Timeline Styles */
        .timeline {
            position: relative;
            padding: 20px 0;
            margin: 20px 0;
        }

        .timeline-item {
            position: relative;
            padding: 10px 0;
            margin-left: 20px;
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: -15px;
            top: 15px;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            border: 2px solid;
            background: white;
            z-index: 2;
        }

        .timeline-item.rented::before {
            border-color: #f59e0b;
            background: #fef3c7;
        }

        .timeline-item.returned::before {
            border-color: #10b981;
            background: #dcfce7;
        }

        .timeline-item.available::before {
            border-color: #6b7280;
            background: #f3f4f6;
        }

        .timeline-line {
            position: absolute;
            left: -11px;
            top: 0;
            width: 2px;
            height: 100%;
            z-index: 1;
        }

        .timeline-line.available {
            border-left: 2px dashed #10b981;
        }

        .timeline-line.rented {
            background: #f59e0b;
        }

        .timeline-content {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 12px;
            margin-left: 15px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .timeline-date {
            font-size: 0.75rem;
            font-weight: 600;
            color: #6b7280;
        }

        .timeline-member {
            font-size: 0.875rem;
            font-weight: 500;
            margin-top: 4px;
        }

        .timeline-status {
            font-size: 0.75rem;
            padding: 2px 8px;
            border-radius: 12px;
            margin-top: 4px;
            display: inline-block;
        }

        .timeline-status.rented {
            background: #fef3c7;
            color: #92400e;
        }

        .timeline-status.returned {
            background: #dcfce7;
            color: #166534;
        }

        .book-card-clickable {
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .book-card-clickable:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .table-row-clickable {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .table-row-clickable:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        /* Genre Selection Styles */
        .dropdown-content .menu li > a:hover {
            background-color: rgba(59, 130, 246, 0.1);
        }
        
        .badge-primary {
            animation: fadeIn 0.2s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: scale(0.9); }
            to { opacity: 1; transform: scale(1); }
        }
        
        .genre-hint {
            animation: slideDown 0.2s ease-out;
        }
        
        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-5px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Enhanced Genre UI Styles */
        .dropdown-content {
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }
        
        .badge-primary {
            box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
        }
        
        .badge-primary:hover {
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
        }
        
        .form-control .label-text {
            margin-bottom: 0.5rem;
        }
        
        /* Chevron rotation animation */
        .dropdown .fas.fa-chevron-down {
            transition: transform 0.2s ease-in-out;
        }
        
        /* Custom scrollbar for genre list */
        .overflow-y-auto::-webkit-scrollbar {
            width: 6px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 3px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 3px;
        }
        
        .overflow-y-auto::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }

        /* Genre Animation Styles */
        .genre-badge-animated {
            animation: genreSlideIn 0.3s ease-out;
        }

        @keyframes genreSlideIn {
            from {
                opacity: 0;
                transform: translateX(-10px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateX(0) scale(1);
            }
        }

        .genre-input-section:focus-within .input {
            border-color: hsl(var(--p));
            box-shadow: 0 0 0 2px hsl(var(--p) / 0.2);
        }
    </style>

    <script>
        // Global variables
        let allBooks = [];
        let filteredBooks = [];
        let currentView = 'card';

        // DOM Elements
        const searchInput = document.getElementById('searchBooks');
        const cardViewContainer = document.getElementById('cardViewContainer');
        const tableViewContainer = document.getElementById('tableViewContainer');
        const tableBody = document.getElementById('tableBody');
        const emptyState = document.getElementById('emptyState');
        const cardViewBtn = document.getElementById('cardView');
        const tableViewBtn = document.getElementById('tableView');

        // Modal elements
        const addBookModal = document.getElementById('addBookModal');
        const editBookModal = document.getElementById('editBookModal');
        const deleteBookModal = document.getElementById('deleteBookModal');
        const bookDetailsModal = document.getElementById('bookDetailsModal');
        const openAddBookModalBtn = document.getElementById('openAddBookModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const deleteBookTitle = document.getElementById('deleteBookTitle');
        const deleteBookAuthor = document.getElementById('deleteBookAuthor');
        const closeAddBookModalBtns = document.querySelectorAll('#closeAddBookModal, #closeAddBookModalBtn');
        const closeEditBookModalBtns = document.querySelectorAll('#closeEditBookModal, #closeEditBookModalBtn');
        const generateISBNBtn = document.getElementById('generateISBN');
        const editBookForm = document.getElementById('editBookForm');

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadBooks();
            setupEventListeners();
        });

        function setupEventListeners() {
            // Search functionality
            searchInput.addEventListener('input', debounce(filterBooks, 300));

            // View toggle
            cardViewBtn.addEventListener('click', () => switchView('card'));
            tableViewBtn.addEventListener('click', () => switchView('table'));

            // Filter buttons
            document.getElementById('filterAll').addEventListener('click', () => applyFilter('all'));
            document.getElementById('filterRecent').addEventListener('click', () => applyFilter('recent'));
            document.getElementById('filterClassic').addEventListener('click', () => applyFilter('classic'));

            // Modal controls
            openAddBookModalBtn.addEventListener('click', () => {
                addBookModal.showModal();
                loadGenres('add'); // Load genres when opening add modal
            });
            closeAddBookModalBtns.forEach(btn => btn.addEventListener('click', () => addBookModal.close()));
            closeEditBookModalBtns.forEach(btn => btn.addEventListener('click', () => editBookModal.close()));

            // Generate ISBN
            generateISBNBtn.addEventListener('click', generateRandomISBN);

            // Delete confirmation
            confirmDeleteBtn.addEventListener('click', confirmDelete);

            // Genre management for Add form
            setupGenreManagement('add');
            // Genre management for Edit form  
            setupGenreManagement('edit');

            // Event delegation for dynamically created buttons
            document.body.addEventListener('click', function(e) {
                // Handle delete button clicks FIRST (highest priority)
                if (e.target.closest('.delete-book-btn')) {
                    e.preventDefault();
                    e.stopPropagation();
                    const btn = e.target.closest('.delete-book-btn');
                    const isbn = btn.getAttribute('data-isbn');
                    deleteBook(isbn);
                    return; // Exit early to prevent other handlers
                }
                
                // Handle edit button clicks SECOND (highest priority)
                if (e.target.closest('.edit-book-btn')) {
                    e.preventDefault();
                    e.stopPropagation();
                    const btn = e.target.closest('.edit-book-btn');
                    const isbn = btn.getAttribute('data-isbn');
                    editBook(isbn);
                    return; // Exit early to prevent other handlers
                }

                // Handle book card/row clicks for details (lower priority)
                if (e.target.closest('.book-card-clickable')) {
                    // Only trigger if we're not inside a button or dropdown
                    if (!e.target.closest('button') && !e.target.closest('.dropdown') && !e.target.closest('.btn-group')) {
                        e.preventDefault();
                        const card = e.target.closest('.book-card-clickable');
                        const isbn = card.getAttribute('data-isbn');
                        showBookDetails(isbn);
                    }
                }

                if (e.target.closest('.table-row-clickable')) {
                    // Only trigger if we're not inside a button
                    if (!e.target.closest('button') && !e.target.closest('.btn-group')) {
                        e.preventDefault();
                        const row = e.target.closest('.table-row-clickable');
                        const isbn = row.getAttribute('data-isbn');
                        showBookDetails(isbn);
                    }
                }

                // Handle rent copy button clicks
                if (e.target.closest('.rent-copy-btn')) {
                    e.preventDefault();
                    const btn = e.target.closest('.rent-copy-btn');
                    const copyId = btn.getAttribute('data-copy-id');
                    const isbn = btn.getAttribute('data-isbn');
                    showRentCopyModal(copyId, isbn);
                }
            });
        }

        // Genre Management Functions
        function setupGenreManagement(mode) {
            const prefix = mode === 'edit' ? 'edit' : '';
            const genreInput = document.getElementById(prefix + 'GenreInput');
            const addGenreBtn = document.getElementById(mode === 'edit' ? 'addEditGenreBtn' : 'addGenreBtn');
            
            if (genreInput && addGenreBtn) {
                // Handle Enter key in genre input
                genreInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        addGenre(mode);
                    }
                });

                // Handle add button click
                addGenreBtn.addEventListener('click', function() {
                    addGenre(mode);
                });
            }
        }

        function addGenre(mode) {
            const prefix = mode === 'edit' ? 'edit' : '';
            const genreInput = document.getElementById(prefix + 'GenreInput');
            const genreName = genreInput.value.trim();
            
            if (!genreName) return;
            
            // Check if genre already exists
            const existingGenres = getSelectedGenres(mode);
            if (existingGenres.includes(genreName)) {
                // Show a brief visual feedback
                genreInput.classList.add('input-warning');
                setTimeout(() => genreInput.classList.remove('input-warning'), 1000);
                return;
            }
            
            // Add the genre
            displayGenre(genreName, mode);
            updateGenreInputs(mode);
            
            // Clear input
            genreInput.value = '';
            genreInput.focus();
        }

        function displayGenre(genreName, mode) {
            const prefix = mode === 'edit' ? 'edit' : '';
            const container = document.getElementById(prefix + 'SelectedGenres');
            const noGenresText = document.getElementById(prefix + 'NoGenresText');
            
            // Hide "no genres" text
            if (noGenresText) {
                noGenresText.style.display = 'none';
            }
            
            // Create genre badge with animation
            const genreBadge = document.createElement('span');
            genreBadge.className = 'badge badge-secondary gap-2 genre-badge-animated';
            genreBadge.innerHTML = `
                ${genreName}
                <button type="button" class="btn btn-ghost btn-xs genre-remove-btn" onclick="removeGenre('${genreName}', '${mode}')" title="Remove ${genreName}">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            container.appendChild(genreBadge);
        }

        function removeGenre(genreName, mode) {
            const prefix = mode === 'edit' ? 'edit' : '';
            const container = document.getElementById(prefix + 'SelectedGenres');
            const noGenresText = document.getElementById(prefix + 'NoGenresText');
            
            // Find and remove the badge
            const badges = container.querySelectorAll('.badge');
            badges.forEach(badge => {
                if (badge.textContent.trim().startsWith(genreName)) {
                    badge.remove();
                }
            });
            
            // Show "no genres" text if no genres left
            const remainingBadges = container.querySelectorAll('.badge');
            if (remainingBadges.length === 0 && noGenresText) {
                noGenresText.style.display = 'inline';
            }
            
            updateGenreInputs(mode);
        }

        function getSelectedGenres(mode) {
            const prefix = mode === 'edit' ? 'edit' : '';
            const container = document.getElementById(prefix + 'SelectedGenres');
            const badges = container.querySelectorAll('.badge');
            
            return Array.from(badges).map(badge => {
                return badge.textContent.trim().split('\n')[0].trim();
            }).filter(genre => genre && genre !== 'No genres selected');
        }

        function updateGenreInputs(mode) {
            const prefix = mode === 'edit' ? 'edit' : '';
            const container = document.getElementById(prefix + 'GenreInputs');
            const genres = getSelectedGenres(mode);
            
            // Clear existing inputs
            container.innerHTML = '';
            
            // Add hidden inputs for each genre
            genres.forEach(genre => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'genres';
                input.value = genre;
                container.appendChild(input);
            });
        }

        function clearGenres(mode) {
            const prefix = mode === 'edit' ? 'edit' : '';
            const container = document.getElementById(prefix + 'SelectedGenres');
            const noGenresText = document.getElementById(prefix + 'NoGenresText');
            
            // Remove all badges
            container.querySelectorAll('.badge').forEach(badge => badge.remove());
            
            // Show "no genres" text
            if (noGenresText) {
                noGenresText.style.display = 'inline';
            }
            
            updateGenreInputs(mode);
        }

        function setGenres(genres, mode) {
            // Clear existing genres
            clearGenres(mode);
            
            // Add each genre
            if (genres && genres.length > 0) {
                genres.forEach(genre => {
                    displayGenre(genre, mode);
                });
                updateGenreInputs(mode);
            }
        }

        async function loadGenres(mode) {
            try {
                const response = await fetch('/api/genres');
                if (response.ok) {
                    const result = await response.json();
                    const genres = result.data || [];
                    displayAvailableGenres(genres, mode);
                }
            } catch (error) {
                console.error('Error loading genres:', error);
            }
        }

        function displayAvailableGenres(genres, mode) {
            const prefix = mode === 'edit' ? 'edit' : '';
            const container = document.getElementById(prefix + 'AvailableGenres');
            
            if (!genres || genres.length === 0) {
                container.innerHTML = '<span class="text-sm text-base-content/60 italic">No existing genres found</span>';
                return;
            }
            
            container.innerHTML = genres.map(genre => `
                <button type="button" 
                        class="btn btn-outline btn-xs" 
                        onclick="addExistingGenre('${genre.Genre}', '${mode}')">
                    ${genre.Genre}
                </button>
            `).join('');
        }

        function addExistingGenre(genreName, mode) {
            const existingGenres = getSelectedGenres(mode);
            if (!existingGenres.includes(genreName)) {
                displayGenre(genreName, mode);
                updateGenreInputs(mode);
            }
        }

        async function loadBooks() {
            try {
                const response = await fetch('/api/books');
                if (response.ok) {
                    const data = await response.json();
                    allBooks = Array.isArray(data) ? data : (data.data || []);
                    filteredBooks = [...allBooks];
                    updateDisplay();
                    updateStats();
                } else {
                    console.error('Failed to load books');
                    showEmptyState();
                }
            } catch (error) {
                console.error('Error loading books:', error);
                showEmptyState();
            }
        }

        function updateDisplay() {
            const visibleBooks = filteredBooks;
            
            if (visibleBooks.length === 0) {
                showEmptyState();
                return;
            }

            hideEmptyState();
            
            if (currentView === 'card') {
                displayCardView(visibleBooks);
            } else {
                displayTableView(visibleBooks);
            }

            updateCounts();
        }

        function displayCardView(books) {
            cardViewContainer.innerHTML = books.map(book => createBookCard(book)).join('');
        }

        function displayTableView(books) {
            tableBody.innerHTML = books.map(book => createBookTableRow(book)).join('');
        }

        function createBookCard(book) {
            const description = book.Description ? 
                (book.Description.length > 100 ? book.Description.substring(0, 100) + '...' : book.Description) : 
                'No description available';
            
            // Format genres as badges - handle both old format (genres array) and new format 
            const genreBadges = book.genres && book.genres.length > 0 
                ? book.genres.map(genre => `<span class="badge badge-secondary badge-sm">${genre}</span>`).join(' ')
                : '<span class="badge badge-ghost badge-sm">No genres</span>';
            
            // Create copies section
            const availableCopies = book.availableCopies || 0;
            const totalCopies = book.totalCopies || 0;
            const copies = book.copies || [];
            
            const copyStatus = availableCopies > 0 
                ? `<span class="badge badge-success">${availableCopies}/${totalCopies} Available</span>`
                : `<span class="badge badge-error">All copies rented</span>`;
            
            // Create individual copy buttons for available copies
            const availableCopyButtons = copies
                .filter(copy => copy.Available === 1)
                .slice(0, 3) // Show only first 3 available copies
                .map(copy => `
                    <button class="btn btn-success btn-xs rent-copy-btn" data-copy-id="${copy.copyID}" data-isbn="${book.bookISBN || book.ISBN}">
                        <i class="fas fa-plus mr-1"></i>Copy #${copy.copyID}
                    </button>
                `).join('');
            
            const moreAvailable = copies.filter(copy => copy.Available === 1).length;
            const showMoreButton = moreAvailable > 3 
                ? `<button class="btn btn-outline btn-xs" onclick="showAllCopies('${book.bookISBN || book.ISBN}')">+${moreAvailable - 3} more</button>`
                : '';
            
            return `
                <div class="card bg-base-100 shadow-lg hover:shadow-xl transition-all duration-300 border border-base-300">
                    <div class="card-body book-card-clickable" data-isbn="${book.ISBN}" title="Click to view detailed information and rental history">
                        <div class="flex justify-between items-start mb-3">
                            <div class="badge badge-primary badge-outline">${book.PublicationYear || 'Unknown'}</div>
                            <div class="dropdown dropdown-end">
                                <div tabindex="0" role="button" class="btn btn-ghost btn-sm btn-circle">
                                    <i class="fas fa-ellipsis-v"></i>
                                </div>
                                <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-40">
                                    <li><a class="text-info edit-book-btn" data-isbn="${book.bookISBN || book.ISBN}"><i class="fas fa-edit mr-2"></i>Edit</a></li>
                                    <li><a class="text-error delete-book-btn" data-isbn="${book.bookISBN || book.ISBN}"><i class="fas fa-trash mr-2"></i>Delete</a></li>
                                </ul>
                            </div>
                        </div>
                        <h3 class="card-title text-lg font-bold text-primary mb-2">${book.Title}</h3>
                        <p class="text-base-content/80 font-medium mb-2">
                            <i class="fas fa-user mr-2 text-secondary"></i>${book.Author}
                        </p>
                        <div class="mb-3">
                            <div class="flex items-center gap-2 mb-2">
                                <i class="fas fa-tags text-accent text-sm"></i>
                                <span class="text-sm text-base-content/70 font-medium">Genres:</span>
                            </div>
                            <div class="flex flex-wrap gap-1">
                                ${genreBadges}
                            </div>
                        </div>
                        
                        <!-- Copy Availability Section -->
                        <div class="mb-3 p-3 bg-base-200 rounded-lg">
                            <div class="flex items-center gap-2 mb-2">
                                <i class="fas fa-copy text-info text-sm"></i>
                                <span class="text-sm font-medium">Copies:</span>
                                ${copyStatus}
                            </div>
                            ${availableCopyButtons ? `
                                <div class="flex flex-wrap gap-1">
                                    ${availableCopyButtons}
                                    ${showMoreButton}
                                </div>
                            ` : '<p class="text-xs text-base-content/60">No copies available for rent</p>'}
                        </div>
                        
                        <p class="text-base-content/60 text-sm mb-4">${description}</p>
                        <div class="card-actions justify-between items-center">
                            <div class="text-xs text-base-content/50">
                                ISBN: ${book.bookISBN || book.ISBN}
                            </div>
                            <div class="btn-group">
                                <button class="btn btn-info btn-sm edit-book-btn" data-isbn="${book.bookISBN || book.ISBN}">
                                    <i class="fas fa-edit mr-1"></i>Edit
                                </button>
                                <button class="btn btn-error btn-sm delete-book-btn" data-isbn="${book.bookISBN || book.ISBN}">
                                    <i class="fas fa-trash mr-1"></i>Delete
                                </button>
                            </div>
                        </div>
                        <div class="text-xs text-center mt-2 text-base-content/40">
                            <i class="fas fa-mouse-pointer mr-1"></i>Click for detailed info
                        </div>
                    </div>
                </div>
            `;
        }

        function createBookTableRow(book) {
            const description = book.Description ? 
                (book.Description.length > 50 ? book.Description.substring(0, 50) + '...' : book.Description) : 
                'No description';
            
            // Format genres as compact badges for table view
            const genreBadges = book.genres && book.genres.length > 0 
                ? book.genres.slice(0, 2).map(genre => `<span class="badge badge-secondary badge-xs">${genre}</span>`).join(' ') +
                  (book.genres.length > 2 ? ` <span class="badge badge-ghost badge-xs">+${book.genres.length - 2}</span>` : '')
                : '<span class="badge badge-ghost badge-xs">None</span>';
            
            // Copy availability info
            const availableCopies = book.availableCopies || 0;
            const totalCopies = book.totalCopies || 0;
            const copyStatusBadge = availableCopies > 0 
                ? `<span class="badge badge-success badge-xs">${availableCopies}/${totalCopies}</span>`
                : `<span class="badge badge-error badge-xs">0/${totalCopies}</span>`;
            
            // Quick rent button for first available copy
            const firstAvailableCopy = book.copies ? book.copies.find(copy => copy.Available === 1) : null;
            const quickRentButton = firstAvailableCopy 
                ? `<button class="btn btn-success btn-xs rent-copy-btn" data-copy-id="${firstAvailableCopy.copyID}" data-isbn="${book.bookISBN || book.ISBN}">
                     <i class="fas fa-plus mr-1"></i>Rent Copy #${firstAvailableCopy.copyID}
                   </button>`
                : `<button class="btn btn-ghost btn-xs" disabled>No copies available</button>`;
            
            return `
                <tr class="hover table-row-clickable" data-isbn="${book.ISBN}" title="Click to view detailed information and rental history">
                    <td class="font-semibold">${book.Title}</td>
                    <td>${book.Author}</td>
                    <td>
                        <div class="badge badge-primary badge-outline">${book.PublicationYear || 'Unknown'}</div>
                    </td>
                    <td class="max-w-xs">
                        <div class="flex flex-wrap gap-1">
                            ${genreBadges}
                        </div>
                    </td>
                    <td class="max-w-xs">
                        <div class="mb-1">${description}</div>
                        <div class="flex items-center gap-2">
                            <i class="fas fa-copy text-xs"></i>
                            ${copyStatusBadge}
                        </div>
                    </td>
                    <td>
                        <div class="flex flex-col gap-1">
                            ${quickRentButton}
                            <div class="btn-group">
                                <button class="btn btn-info btn-xs edit-book-btn" data-isbn="${book.bookISBN || book.ISBN}">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-error btn-xs delete-book-btn" data-isbn="${book.bookISBN || book.ISBN}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </td>
                </tr>
            `;
        }

        function switchView(view) {
            currentView = view;
            
            if (view === 'card') {
                cardViewBtn.classList.add('tab-active');
                tableViewBtn.classList.remove('tab-active');
                cardViewContainer.style.display = 'grid';
                tableViewContainer.style.display = 'none';
            } else {
                tableViewBtn.classList.add('tab-active');
                cardViewBtn.classList.remove('tab-active');
                cardViewContainer.style.display = 'none';
                tableViewContainer.style.display = 'block';
            }
            
            updateDisplay();
        }

        function filterBooks() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            
            filteredBooks = allBooks.filter(book => 
                book.Title.toLowerCase().includes(searchTerm) ||
                book.Author.toLowerCase().includes(searchTerm) ||
                (book.Description && book.Description.toLowerCase().includes(searchTerm)) ||
                (book.genres && book.genres.some(genre => genre.toLowerCase().includes(searchTerm))) ||
                book.ISBN.includes(searchTerm)
            );
            
            updateDisplay();
        }

        function applyFilter(filterType) {
            const currentYear = new Date().getFullYear();
            
            switch(filterType) {
                case 'recent':
                    filteredBooks = allBooks.filter(book => book.PublicationYear >= 2020);
                    break;
                case 'classic':
                    filteredBooks = allBooks.filter(book => book.PublicationYear < 2000);
                    break;
                default:
                    filteredBooks = [...allBooks];
            }
            
            // Apply current search filter
            if (searchInput.value.trim()) {
                filterBooks();
            } else {
                updateDisplay();
            }

            // Update active filter
            document.querySelectorAll('.dropdown-content a').forEach(link => link.classList.remove('active'));
            document.getElementById(`filter${filterType.charAt(0).toUpperCase() + filterType.slice(1)}`).classList.add('active');
        }

        function updateStats() {
            const totalBooks = allBooks.length;
            const uniqueAuthors = new Set(allBooks.map(book => book.Author)).size;
            const latestYear = Math.max(...allBooks.map(book => book.PublicationYear || 0));
            
            document.getElementById('totalBooksCount').textContent = totalBooks;
            document.getElementById('uniqueAuthorsCount').textContent = uniqueAuthors;
            document.getElementById('latestYear').textContent = latestYear || 'Unknown';
        }

        function updateCounts() {
            document.getElementById('visibleCount').textContent = filteredBooks.length;
            document.getElementById('totalCount').textContent = allBooks.length;
        }

        function showEmptyState() {
            cardViewContainer.style.display = 'none';
            tableViewContainer.style.display = 'none';
            emptyState.style.display = 'block';
        }

        function hideEmptyState() {
            emptyState.style.display = 'none';
            if (currentView === 'card') {
                cardViewContainer.style.display = 'grid';
            } else {
                tableViewContainer.style.display = 'block';
            }
        }

        function generateRandomISBN() {
            let isbn = '';
            for (let i = 0; i < 13; i++) {
                isbn += Math.floor(Math.random() * 10);
            }
            document.getElementById('ISBN').value = isbn;
        }

        function editBook(isbn) {
            const book = allBooks.find(b => b.ISBN === isbn);
            
            if (book) {
                document.getElementById('editTitle').value = book.Title;
                document.getElementById('editAuthor').value = book.Author;
                document.getElementById('editPublicationYear').value = book.PublicationYear;
                document.getElementById('editDescription').value = book.Description || '';
                document.getElementById('editISBN').value = book.ISBN;
                
                // Load genres and set current book's genres
                loadGenres('edit');
                setGenres(book.genres || [], 'edit');
                
                editBookModal.showModal();
            }
        }

        function deleteBook(isbn) {
            const book = allBooks.find(b => b.ISBN == isbn);
            
            if (!book) {
                return;
            }

            // Populate modal with book details
            deleteBookTitle.textContent = book.Title;
            deleteBookAuthor.textContent = `by ${book.Author}`;
            
            // Store the ISBN for later use
            confirmDeleteBtn.setAttribute('data-isbn', isbn);
            
            // Show the custom delete modal
            deleteBookModal.showModal();
        }

        function showRentCopyModal(copyId, isbn) {
            // For now, we'll show a simple prompt to get member ID
            // In a full implementation, this would be a proper modal with member selection
            const memberId = prompt('Enter Member ID to rent this copy:');
            
            if (memberId && !isNaN(memberId)) {
                rentCopy(parseInt(memberId), parseInt(copyId), isbn);
            } else if (memberId !== null) {
                alert('Please enter a valid Member ID');
            }
        }

        async function rentCopy(memberId, copyId, isbn) {
            try {
                const response = await fetch(`/api/members/${memberId}/rent-copy/${copyId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();
                
                if (response.ok && result.success) {
                    alert(`Copy #${copyId} rented successfully!`);
                    // Reload the books to update availability
                    loadBooks();
                } else {
                    alert(`Error: ${result.error || result.message || 'Failed to rent copy'}`);
                }
            } catch (error) {
                console.error('Error renting copy:', error);
                alert('Error renting copy. Please try again.');
            }
        }

        function showAllCopies(isbn) {
            const book = allBooks.find(b => (b.bookISBN || b.ISBN) === isbn);
            if (!book) return;
            
            const copies = book.copies || [];
            const availableCopies = copies.filter(copy => copy.Available === 1);
            
            if (availableCopies.length === 0) {
                alert('No available copies for this book.');
                return;
            }
            
            let message = `Available copies for "${book.Title}":\\n\\n`;
            availableCopies.forEach(copy => {
                message += `Copy #${copy.copyID} - Available\\n`;
            });
            message += '\\nClick on individual copy buttons to rent them.';
            
            alert(message);
        }

        function confirmDelete() {
            const isbn = confirmDeleteBtn.getAttribute('data-isbn');
            const book = allBooks.find(b => b.ISBN == isbn);
            
            if (book) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/api/books/delete';
                
                // Create hidden input for ISBN
                const isbnInput = document.createElement('input');
                isbnInput.type = 'hidden';
                isbnInput.name = 'ISBN';
                isbnInput.value = book.ISBN;
                form.appendChild(isbnInput);
                
                document.body.appendChild(form);
                form.submit();
            }
            
            // Close the modal
            deleteBookModal.close();
        }

        // Show book details modal
        async function showBookDetails(isbn) {
            try {
                const response = await fetch(`/api/books/${isbn}/details`);
                if (!response.ok) {
                    throw new Error('Failed to fetch book details');
                }
                
                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.message || 'Failed to fetch book details');
                }
                
                const bookDetails = result.data;
                populateBookDetailsModal(bookDetails);
                bookDetailsModal.showModal();
                
            } catch (error) {
                console.error('Error fetching book details:', error);
                // Show a simple alert for now, could be improved with a toast notification
                alert('Failed to load book details. Please try again.');
            }
        }

        // Populate the book details modal
        function populateBookDetailsModal(bookDetails) {
            const { book, rentalHistory, currentlyBorrowed, totalRentals } = bookDetails;
            
            // Basic book information
            document.getElementById('detailBookTitle').textContent = book.Title;
            document.getElementById('detailBookAuthor').textContent = `by ${book.Author}`;
            document.getElementById('detailBookYear').textContent = book.PublicationYear || 'Unknown';
            document.getElementById('detailBookYearFull').textContent = book.PublicationYear || 'Unknown';
            document.getElementById('detailBookISBN').textContent = book.ISBN;
            document.getElementById('detailBookDescription').textContent = book.Description || 'No description available';
            
            // Status badge
            const statusBadge = document.getElementById('detailBookStatus');
            if (currentlyBorrowed) {
                statusBadge.innerHTML = '<i class="fas fa-user mr-1"></i>Currently Borrowed';
                statusBadge.className = 'badge badge-warning';
            } else {
                statusBadge.innerHTML = '<i class="fas fa-check-circle mr-1"></i>Available';
                statusBadge.className = 'badge badge-success';
            }
            
            // Genres
            const genresContainer = document.getElementById('detailBookGenres');
            if (book.genres && book.genres.length > 0) {
                genresContainer.innerHTML = book.genres
                    .map(genre => `<span class="badge badge-secondary">${genre}</span>`)
                    .join('');
            } else {
                genresContainer.innerHTML = '<span class="badge badge-ghost">No genres specified</span>';
            }
            
            // Statistics
            document.getElementById('detailTotalRentals').textContent = totalRentals;
            document.getElementById('detailCurrentStatus').textContent = currentlyBorrowed ? 'Borrowed' : 'Available';
            
            // Create timeline
            createRentalTimeline(rentalHistory, currentlyBorrowed);
        }

        // Create the rental timeline
        function createRentalTimeline(rentalHistory, currentlyBorrowed) {
            const timelineContainer = document.getElementById('rentalTimeline');
            
            if (!rentalHistory || rentalHistory.length === 0) {
                timelineContainer.innerHTML = `
                    <div class="text-center py-8 text-base-content/60">
                        <i class="fas fa-book-open text-2xl mb-2"></i>
                        <p>No rental history available</p>
                        <p class="text-sm">This book has never been borrowed</p>
                        <div class="mt-4 p-3 bg-info/10 rounded-lg">
                            <p class="text-xs text-info">
                                <i class="fas fa-info-circle mr-1"></i>
                                Future versions will support multiple copies with individual timelines
                            </p>
                        </div>
                    </div>
                `;
                return;
            }
            
            let timelineHTML = '<div class="timeline">';
            
            // Future enhancement notice for multiple copies
            timelineHTML += `
                <div class="mb-4 p-3 bg-base-200 rounded-lg text-center">
                    <div class="text-sm font-semibold mb-1">Single Copy Timeline</div>
                    <div class="text-xs text-base-content/60">
                        Currently showing history for 1 copy. Future versions will display individual copy timelines.
                    </div>
                </div>
            `;
            
            // Sort rentals by date
            const sortedRentals = [...rentalHistory].sort((a, b) => 
                new Date(a.rentalDate) - new Date(b.rentalDate)
            );
            
            // Add initial availability period if needed
            if (sortedRentals.length > 0) {
                timelineHTML += `
                    <div class="timeline-item available">
                        <div class="timeline-line available"></div>
                        <div class="timeline-content">
                            <div class="timeline-date">Book Added</div>
                            <div class="timeline-status returned">Available in Library</div>
                        </div>
                    </div>
                `;
            }
            
            sortedRentals.forEach((rental, index) => {
                const rentalDate = new Date(rental.rentalDate).toLocaleDateString();
                const returnDate = rental.returnedDate ? 
                    new Date(rental.returnedDate).toLocaleDateString() : null;
                
                // Rental start event
                timelineHTML += `
                    <div class="timeline-item rented">
                        <div class="timeline-line rented"></div>
                        <div class="timeline-content">
                            <div class="timeline-date">${rentalDate}</div>
                            <div class="timeline-member">Borrowed by: ${rental.memberName || 'Unknown Member'}</div>
                            <div class="timeline-status rented">Rented</div>
                        </div>
                    </div>
                `;
                
                // Return event (if returned)
                if (rental.returned && returnDate) {
                    timelineHTML += `
                        <div class="timeline-item returned">
                            <div class="timeline-line available"></div>
                            <div class="timeline-content">
                                <div class="timeline-date">${returnDate}</div>
                                <div class="timeline-member">Returned by: ${rental.memberName || 'Unknown Member'}</div>
                                <div class="timeline-status returned">Returned</div>
                            </div>
                        </div>
                    `;
                }
            });
            
            // Current status
            if (currentlyBorrowed) {
                timelineHTML += `
                    <div class="timeline-item rented">
                        <div class="timeline-line rented"></div>
                        <div class="timeline-content">
                            <div class="timeline-date">Current Status</div>
                            <div class="timeline-status rented">Currently Borrowed</div>
                        </div>
                    </div>
                `;
            } else {
                timelineHTML += `
                    <div class="timeline-item available">
                        <div class="timeline-line available"></div>
                        <div class="timeline-content">
                            <div class="timeline-date">Current Status</div>
                            <div class="timeline-status returned">Available for Borrowing</div>
                        </div>
                    </div>
                `;
            }
            
            timelineHTML += '</div>';
            timelineContainer.innerHTML = timelineHTML;
        }

        // Utility function for debouncing
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    </script>
</body>
</html>