<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <title><%= title %></title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="/output.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>
<body class="bg-base-100 min-h-screen">
    <!-- Navigation -->
    <div class="navbar bg-primary text-primary-content shadow-lg sticky top-0 z-40">
        <div class="navbar-start">
            <div class="dropdown">
                <div tabindex="0" role="button" class="btn btn-ghost lg:hidden">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8m-8 6h16"></path>
                    </svg>
                </div>
                <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-primary rounded-box w-52">
                    <li><a href="/" class="text-primary-content"><i class="fas fa-home mr-2"></i>Home</a></li>
                    <li><a href="/books" class="text-primary-content"><i class="fas fa-book mr-2"></i>Books</a></li>
                    <li><a href="/members" class="text-primary-content font-bold"><i class="fas fa-users mr-2"></i>Members</a></li>
                    <li><a href="/borrowing" class="text-primary-content"><i class="fas fa-exchange-alt mr-2"></i>Borrowing</a></li>
                </ul>
            </div>
            <a href="/" class="btn btn-ghost text-xl">
                <i class="fas fa-book-open mr-2"></i>
                Library Management
            </a>
        </div>
        <div class="navbar-center hidden lg:flex">
            <ul class="menu menu-horizontal px-1">
                <li><a href="/" class="text-primary-content"><i class="fas fa-home mr-2"></i>Home</a></li>
                <li><a href="/books" class="text-primary-content"><i class="fas fa-book mr-2"></i>Books</a></li>
                <li><a href="/members" class="text-primary-content font-bold"><i class="fas fa-users mr-2"></i>Members</a></li>
                <li><a href="/borrowing" class="text-primary-content"><i class="fas fa-exchange-alt mr-2"></i>Borrowing</a></li>
            </ul>
        </div>
        <div class="navbar-end">
        </div>
    </div>

    <div class="container mx-auto p-4">
        <!-- Header -->
        <div class="flex flex-col lg:flex-row justify-between items-center mb-6 gap-4">
            <div>
                <h1 class="text-3xl font-bold text-base-content flex items-center gap-2">
                    <i class="fas fa-users text-primary"></i>
                    Members Management
                </h1>
                <p class="text-base-content/70 mt-1">Manage library members and their information</p>
            </div>
            <div class="flex gap-2">
                <button id="bulk-delete-btn" class="btn btn-error btn-sm" disabled>
                    <i class="fas fa-trash mr-1"></i>
                    Delete Selected
                </button>
                <button id="add-member-btn" class="btn btn-primary">
                    <i class="fas fa-user-plus mr-2"></i>
                    Add Member
                </button>
            </div>
        </div>

        <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
            <!-- Members List Section -->
            <div class="xl:col-span-2">
                <div class="card bg-base-200 shadow-xl">
                    <div class="card-body">
                        <!-- Search Bar -->
                        <div class="flex flex-col sm:flex-row gap-4 mb-4">
                            <div class="flex-1">
                                <div class="join w-full">
                                    <input 
                                        id="search-input" 
                                        type="text" 
                                        placeholder="🔍 Search by name or member ID..." 
                                        class="input input-bordered join-item flex-1"
                                    />
                                    <button id="search-btn" class="btn btn-primary join-item">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                            </div>
                            <button id="filter-btn" class="btn btn-outline btn-secondary">
                                <i class="fas fa-filter mr-1"></i>
                                Filters
                            </button>
                        </div>

                        <!-- Filter Options (Initially Hidden) -->
                        <div id="filter-options" class="hidden border rounded-lg p-4 mb-4 bg-base-100">
                            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Sort by</span>
                                    </label>
                                    <select id="sort-select" class="select select-bordered select-sm">
                                        <option value="Fname">First Name</option>
                                        <option value="Sname">Last Name</option>
                                        <option value="email">Email</option>
                                        <option value="join_date">Join Date</option>
                                    </select>
                                </div>
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Order</span>
                                    </label>
                                    <select id="order-select" class="select select-bordered select-sm">
                                        <option value="ASC">Ascending</option>
                                        <option value="DESC">Descending</option>
                                    </select>
                                </div>
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Per page</span>
                                    </label>
                                    <select id="per-page-select" class="select select-bordered select-sm">
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Member Count -->
                        <div class="flex justify-between items-center mb-4">
                            <div class="text-sm text-base-content/70">
                                <span id="member-count">Loading members...</span>
                            </div>
                            <div class="form-control">
                                <label class="label cursor-pointer gap-2">
                                    <span class="label-text text-sm">Select All</span>
                                    <input id="select-all" type="checkbox" class="checkbox checkbox-sm" />
                                </label>
                            </div>
                        </div>

                        <!-- Loading Spinner -->
                        <div id="loading" class="flex justify-center items-center py-8 hidden">
                            <div class="loading loading-spinner loading-md text-primary"></div>
                            <span class="ml-2 text-base-content/70">Loading...</span>
                        </div>

                        <!-- Members Table -->
                        <div class="overflow-x-auto">
                            <table class="table table-zebra">
                                <thead>
                                    <tr>
                                        <th>
                                            <input type="checkbox" class="checkbox checkbox-sm" disabled />
                                        </th>
                                        <th>ID</th>
                                        <th>👤 Full Name</th>
                                        <th>📧 Email</th>
                                        <th>📱 Phone</th>
                                        <th>📅 Join Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="members-table-body">
                                    <!-- Members will be populated here -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="flex justify-center mt-6">
                            <div class="join">
                                <button id="prev-page" class="join-item btn btn-sm">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <span id="page-info" class="join-item btn btn-sm btn-disabled">
                                    Page 1
                                </span>
                                <button id="next-page" class="join-item btn btn-sm">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Member Details Panel -->
            <div class="xl:col-span-1">
                <div class="card bg-base-200 shadow-xl sticky top-4">
                    <div class="card-body">
                        <h2 class="card-title text-lg mb-4">
                            <i class="fas fa-user-circle text-primary"></i>
                            Member Details
                        </h2>
                        
                        <div id="no-member-selected" class="text-center py-8">
                            <i class="fas fa-user-slash text-4xl text-base-content/20 mb-4"></i>
                            <p class="text-base-content/50">Select a member to view details</p>
                        </div>

                        <form id="member-details-form" class="hidden space-y-4">
                            <!-- Member ID (Read-only) -->
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">🆔 Member ID</span>
                                </label>
                                <input id="member-id" type="text" class="input input-bordered input-sm" readonly />
                            </div>

                            <!-- First Name -->
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">👤 First Name <span class="text-error">*</span></span>
                                </label>
                                <input id="member-fname" type="text" class="input input-bordered input-sm" required />
                            </div>

                            <!-- Last Name -->
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">👤 Last Name <span class="text-error">*</span></span>
                                </label>
                                <input id="member-sname" type="text" class="input input-bordered input-sm" required />
                            </div>

                            <!-- Email -->
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">📧 Email <span class="text-error">*</span></span>
                                </label>
                                <input id="member-email" type="email" class="input input-bordered input-sm" required />
                            </div>

                            <!-- Phone -->
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">📱 Phone <span class="text-error">*</span></span>
                                </label>
                                <input id="member-phone" type="tel" class="input input-bordered input-sm" required />
                            </div>

                            <!-- Address -->
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">🏠 Address <span class="text-error">*</span></span>
                                </label>
                                <textarea id="member-address" class="textarea textarea-bordered" rows="2" required></textarea>
                            </div>

                            <!-- City -->
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">🏙️ City <span class="text-error">*</span></span>
                                </label>
                                <input id="member-city" type="text" class="input input-bordered input-sm" required />
                            </div>

                            <!-- Postcode -->
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">📮 Postcode <span class="text-error">*</span></span>
                                </label>
                                <input id="member-postcode" type="text" class="input input-bordered input-sm" required />
                            </div>

                            <!-- Join Date (Read-only) -->
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">📅 Join Date</span>
                                </label>
                                <input id="member-join-date" type="text" class="input input-bordered input-sm" readonly />
                            </div>

                            <!-- Action Buttons -->
                            <div class="card-actions justify-end mt-6 gap-2">
                                <div id="view-mode-buttons">
                                    <button id="edit-member-btn" type="button" class="btn btn-primary btn-sm">
                                        <i class="fas fa-edit mr-1"></i>
                                        Edit
                                    </button>
                                    <button id="delete-member-btn" type="button" class="btn btn-error btn-sm">
                                        <i class="fas fa-trash mr-1"></i>
                                        Delete
                                    </button>
                                </div>
                                <div id="edit-mode-buttons" class="hidden">
                                    <button id="cancel-edit-btn" type="button" class="btn btn-outline btn-sm">
                                        Cancel
                                    </button>
                                    <button id="save-member-btn" type="button" class="btn btn-success btn-sm">
                                        <i class="fas fa-save mr-1"></i>
                                        Save
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Member Modal -->
    <dialog id="add-member-modal" class="modal">
        <div class="modal-box w-11/12 max-w-2xl">
            <form method="dialog">
                <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
            </form>
            <h3 class="font-bold text-lg mb-4">
                <i class="fas fa-user-plus text-primary mr-2"></i>
                Add New Member
            </h3>
            
            <form id="add-member-form" class="space-y-4">
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">First Name <span class="text-error">*</span></span>
                        </label>
                        <input name="Fname" type="text" class="input input-bordered" required />
                    </div>
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Last Name <span class="text-error">*</span></span>
                        </label>
                        <input name="Sname" type="text" class="input input-bordered" required />
                    </div>
                </div>

                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Email <span class="text-error">*</span></span>
                    </label>
                    <input name="email" type="email" class="input input-bordered" required />
                </div>

                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Phone <span class="text-error">*</span></span>
                    </label>
                    <input name="phone" type="tel" class="input input-bordered" required />
                </div>

                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Address <span class="text-error">*</span></span>
                    </label>
                    <textarea name="address" class="textarea textarea-bordered" rows="3" required></textarea>
                </div>

                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">City <span class="text-error">*</span></span>
                        </label>
                        <input name="city" type="text" class="input input-bordered" required />
                    </div>
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Postcode <span class="text-error">*</span></span>
                        </label>
                        <input name="postcode" type="text" class="input input-bordered" required />
                    </div>
                </div>

                <div class="modal-action">
                    <button type="button" class="btn btn-outline" onclick="document.getElementById('add-member-modal').close()">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-user-plus mr-1"></i>
                        Add Member
                    </button>
                </div>
            </form>
        </div>
    </dialog>

    <!-- Toast Notifications Container -->
    <div id="toast-container" class="toast toast-top toast-end z-50"></div>

    <!-- Include JavaScript -->
    <script>
      // Members Management JavaScript
// ES6 Module for handling member operations
console.log('testing');
class MembersManager {
    constructor() {
        this.currentMembers = [];
        this.selectedMemberIds = new Set();
        this.currentPage = 1;
        this.perPage = 10;
        this.totalMembers = 0;
        this.isEditMode = false;
        this.currentMemberId = null;
        
        this.init();
    }

    init() {
        this.bindEvents();
        this.loadMembers();
    }

    bindEvents() {
        // Search functionality
        const searchInput = document.getElementById('search-input');
        const searchBtn = document.getElementById('search-btn');
        
        searchInput.addEventListener('input', this.debounce(() => {
            this.handleSearch();
        }, 300));
        
        searchBtn.addEventListener('click', () => {
            this.handleSearch();
        });

        // Filter toggle
        document.getElementById('filter-btn').addEventListener('click', () => {
            this.toggleFilterOptions();
        });

        // Filter changes
        document.getElementById('sort-select').addEventListener('change', () => {
            this.loadMembers();
        });
        
        document.getElementById('order-select').addEventListener('change', () => {
            this.loadMembers();
        });
        
        document.getElementById('per-page-select').addEventListener('change', () => {
            this.perPage = parseInt(document.getElementById('per-page-select').value);
            this.currentPage = 1;
            this.loadMembers();
        });

        // Add member modal and form
        document.getElementById('add-member-btn').addEventListener('click', () => {
            document.getElementById('add-member-modal').showModal();
        });

        document.getElementById('add-member-form').addEventListener('submit', (e) => {
            this.handleAddMember(e);
        });

        // Member details form
        document.getElementById('edit-member-btn').addEventListener('click', () => {
            this.toggleEditMode(true);
        });
        
        document.getElementById('cancel-edit-btn').addEventListener('click', () => {
            this.toggleEditMode(false);
        });
        
        document.getElementById('save-member-btn').addEventListener('click', () => {
            this.handleUpdateMember();
        });
        
        document.getElementById('delete-member-btn').addEventListener('click', () => {
            this.handleDeleteMember();
        });

        // Select all checkbox
        document.getElementById('select-all').addEventListener('change', (e) => {
            this.handleSelectAll(e.target.checked);
        });

        // Bulk delete
        document.getElementById('bulk-delete-btn').addEventListener('click', () => {
            this.handleBulkDelete();
        });

        // Pagination
        document.getElementById('prev-page').addEventListener('click', () => {
            if (this.currentPage > 1) {
                this.currentPage--;
                this.loadMembers();
            }
        });
        
        document.getElementById('next-page').addEventListener('click', () => {
            const totalPages = Math.ceil(this.totalMembers / this.perPage);
            if (this.currentPage < totalPages) {
                this.currentPage++;
                this.loadMembers();
            }
        });
    }

    // Utility function for debouncing search input
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    async loadMembers() {
        try {
            this.showLoading(true);
            
            const response = await fetch('/api/members');
            const data = await response.json();
            
            if (data.success) {
                this.currentMembers = data.data || [];
                this.totalMembers = data.count || 0;
                this.renderMembersTable();
                this.updateMemberCount();
                this.updatePagination();
            } else {
                this.showToast('Error loading members', 'error');
            }
        } catch (error) {
            console.error('Error loading members:', error);
            this.showToast('Failed to load members', 'error');
        } finally {
            this.showLoading(false);
        }
    }

    async handleSearch() {
        const searchTerm = document.getElementById('search-input').value.trim();
        
        if (!searchTerm) {
            this.loadMembers();
            return;
        }

        try {
            this.showLoading(true);
            
            const response = await fetch(`/api/members/search?q=${encodeURIComponent(searchTerm)}`);
            const data = await response.json();
            
            if (data.success) {
                this.currentMembers = data.data || [];
                this.totalMembers = data.count || 0;
                this.renderMembersTable();
                this.updateMemberCount();
                this.updatePagination();
            } else {
                this.showToast('No members found', 'info');
                this.currentMembers = [];
                this.renderMembersTable();
            }
        } catch (error) {
            console.error('Error searching members:', error);
            this.showToast('Search failed', 'error');
        } finally {
            this.showLoading(false);
        }
    }

    toggleFilterOptions() {
        const filterOptions = document.getElementById('filter-options');
        const filterBtn = document.getElementById('filter-btn');
        
        if (filterOptions.classList.contains('hidden')) {
            filterOptions.classList.remove('hidden');
            filterBtn.classList.add('btn-active');
        } else {
            filterOptions.classList.add('hidden');
            filterBtn.classList.remove('btn-active');
        }
    }

    renderMembersTable() {
        const tbody = document.getElementById('members-table-body');
        
        if (this.currentMembers.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center py-12">
                        <div class="flex flex-col items-center gap-4">
                            <i class="fas fa-users text-4xl text-base-content/20"></i>
                            <div>
                                <h3 class="text-lg font-semibold text-base-content/70">No Members Found</h3>
                                <p class="text-sm text-base-content/50 mt-2">
                                    Try adjusting your search criteria or add a new member.
                                </p>
                            </div>
                        </div>
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = this.currentMembers.map(member => `
            <tr class="hover:bg-base-300 cursor-pointer member-row" data-member-id="${member.id}">
                <td>
                    <label>
                        <input type="checkbox" class="checkbox checkbox-sm member-checkbox" value="${member.id}" />
                    </label>
                </td>
                <td class="font-mono font-semibold text-primary">#${member.id}</td>
                <td>
                    <div class="font-semibold">${member.Fname} ${member.Sname}</div>
                </td>
                <td>
                    <div class="flex items-center gap-2">
                        <i class="fas fa-envelope text-primary text-sm"></i>
                        <span class="text-sm">${member.email}</span>
                    </div>
                </td>
                <td>
                    <div class="flex items-center gap-2">
                        <i class="fas fa-phone text-primary text-sm"></i>
                        <span class="text-sm">${member.phone}</span>
                    </div>
                </td>
                <td class="text-sm text-base-content/70">
                    ${member.join_date ? new Date(member.join_date).toLocaleDateString() : 'N/A'}
                </td>
                <td>
                    <div class="flex gap-1">
                        <button class="btn btn-ghost btn-xs view-member-btn" data-member-id="${member.id}" title="View Details">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-ghost btn-xs edit-member-btn" data-member-id="${member.id}" title="Quick Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');

        // Bind row click events
        document.querySelectorAll('.member-row').forEach(row => {
            row.addEventListener('click', (e) => {
                if (!e.target.closest('.member-checkbox') && !e.target.closest('button')) {
                    const memberId = parseInt(row.dataset.memberId);
                    this.loadMemberDetails(memberId);
                }
            });
        });

        // Bind view/edit button events
        document.querySelectorAll('.view-member-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const memberId = parseInt(btn.dataset.memberId);
                this.loadMemberDetails(memberId);
            });
        });

        document.querySelectorAll('.edit-member-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const memberId = parseInt(btn.dataset.memberId);
                this.loadMemberDetails(memberId);
                setTimeout(() => this.toggleEditMode(true), 100);
            });
        });

        // Bind checkbox events
        document.querySelectorAll('.member-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                e.stopPropagation();
                this.handleMemberSelect(parseInt(checkbox.value), checkbox.checked);
            });
        });
    }

    async loadMemberDetails(memberId) {
        try {
            this.currentMemberId = memberId;
            
            const response = await fetch(`/api/members/${memberId}`);
            const data = await response.json();
            
            if (data.success && data.data) {
                this.displayMemberDetails(data.data);
            } else {
                this.showToast('Member not found', 'error');
            }
        } catch (error) {
            console.error('Error loading member details:', error);
            this.showToast('Failed to load member details', 'error');
        }
    }

    displayMemberDetails(member) {
        // Hide empty state and show details form
        document.getElementById('no-member-selected').classList.add('hidden');
        document.getElementById('member-details-form').classList.remove('hidden');

        // Populate form fields
        document.getElementById('member-id').value = `#${member.id}`;
        document.getElementById('member-fname').value = member.Fname;
        document.getElementById('member-sname').value = member.Sname;
        document.getElementById('member-email').value = member.email;
        document.getElementById('member-phone').value = member.phone;
        document.getElementById('member-address').value = member.address;
        document.getElementById('member-city').value = member.city;
        document.getElementById('member-postcode').value = member.postcode;
        document.getElementById('member-join-date').value = member.join_date ? 
            new Date(member.join_date).toLocaleDateString() : 'N/A';

        // Reset to view mode
        this.toggleEditMode(false);

        // Highlight the selected row
        document.querySelectorAll('.member-row').forEach(row => {
            row.classList.remove('bg-primary/10');
        });
        const selectedRow = document.querySelector(`.member-row[data-member-id="${member.id}"]`);
        if (selectedRow) {
            selectedRow.classList.add('bg-primary/10');
        }
    }

    toggleEditMode(isEdit) {
        this.isEditMode = isEdit;
        
        const fields = ['member-fname', 'member-sname', 'member-email', 'member-phone', 
                       'member-address', 'member-city', 'member-postcode'];
        
        fields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            field.readOnly = !isEdit;
            if (isEdit) {
                field.classList.add('input-primary');
                field.classList.remove('input-bordered');
            } else {
                field.classList.remove('input-primary');
                field.classList.add('input-bordered');
            }
        });

        // Toggle buttons
        document.getElementById('view-mode-buttons').classList.toggle('hidden', isEdit);
        document.getElementById('edit-mode-buttons').classList.toggle('hidden', !isEdit);
    }

    async handleAddMember(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const memberData = {
            Fname: formData.get('Fname').trim(),
            Sname: formData.get('Sname').trim(),
            email: formData.get('email').trim(),
            phone: formData.get('phone').trim(),
            address: formData.get('address').trim(),
            city: formData.get('city').trim(),
            postcode: formData.get('postcode').trim()
        };

        try {
            const response = await fetch('/api/members', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(memberData)
            });

            const data = await response.json();

            if (response.ok && data.success) {
                this.showToast('Member added successfully!', 'success');
                document.getElementById('add-member-modal').close();
                e.target.reset();
                this.loadMembers();
            } else {
                this.showToast(data.error || 'Failed to add member', 'error');
            }
        } catch (error) {
            console.error('Error adding member:', error);
            this.showToast('Failed to add member', 'error');
        }
    }

    async handleUpdateMember() {
        if (!this.currentMemberId) {
            this.showToast('No member selected', 'error');
            return;
        }

        const memberData = {
            Fname: document.getElementById('member-fname').value.trim(),
            Sname: document.getElementById('member-sname').value.trim(),
            email: document.getElementById('member-email').value.trim(),
            phone: document.getElementById('member-phone').value.trim(),
            address: document.getElementById('member-address').value.trim(),
            city: document.getElementById('member-city').value.trim(),
            postcode: document.getElementById('member-postcode').value.trim()
        };

        try {
            const response = await fetch(`/api/members/${this.currentMemberId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(memberData)
            });

            const data = await response.json();

            if (response.ok && data.success) {
                this.showToast('Member updated successfully!', 'success');
                this.toggleEditMode(false);
                this.loadMembers();
                this.loadMemberDetails(this.currentMemberId);
            } else {
                this.showToast(data.error || 'Failed to update member', 'error');
            }
        } catch (error) {
            console.error('Error updating member:', error);
            this.showToast('Failed to update member', 'error');
        }
    }

    async handleDeleteMember() {
        if (!this.currentMemberId) {
            this.showToast('No member selected', 'error');
            return;
        }

        if (!confirm('Are you sure you want to delete this member? This action cannot be undone.')) {
            return;
        }

        try {
            const response = await fetch(`/api/members/${this.currentMemberId}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (response.ok && data.success) {
                this.showToast('Member deleted successfully!', 'success');
                this.currentMemberId = null;
                document.getElementById('no-member-selected').classList.remove('hidden');
                document.getElementById('member-details-form').classList.add('hidden');
                this.loadMembers();
            } else {
                this.showToast(data.error || 'Failed to delete member', 'error');
            }
        } catch (error) {
            console.error('Error deleting member:', error);
            this.showToast('Failed to delete member', 'error');
        }
    }

    handleMemberSelect(memberId, isSelected) {
        if (isSelected) {
            this.selectedMemberIds.add(memberId);
        } else {
            this.selectedMemberIds.delete(memberId);
        }

        // Update bulk delete button
        const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
        bulkDeleteBtn.disabled = this.selectedMemberIds.size === 0;
        
        if (this.selectedMemberIds.size > 0) {
            bulkDeleteBtn.textContent = `Delete Selected (${this.selectedMemberIds.size})`;
        } else {
            bulkDeleteBtn.textContent = 'Delete Selected';
        }

        // Update select all checkbox
        const selectAllCheckbox = document.getElementById('select-all');
        const totalCheckboxes = document.querySelectorAll('.member-checkbox').length;
        
        if (this.selectedMemberIds.size === 0) {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
        } else if (this.selectedMemberIds.size === totalCheckboxes) {
            selectAllCheckbox.checked = true;
            selectAllCheckbox.indeterminate = false;
        } else {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = true;
        }
    }

    handleSelectAll(selectAll) {
        document.querySelectorAll('.member-checkbox').forEach(checkbox => {
            checkbox.checked = selectAll;
            this.handleMemberSelect(parseInt(checkbox.value), selectAll);
        });
    }

    async handleBulkDelete() {
        if (this.selectedMemberIds.size === 0) {
            this.showToast('No members selected', 'error');
            return;
        }

        const count = this.selectedMemberIds.size;
        if (!confirm(`Are you sure you want to delete ${count} member(s)? This action cannot be undone.`)) {
            return;
        }

        try {
            const deletePromises = Array.from(this.selectedMemberIds).map(id =>
                fetch(`/api/members/${id}`, { method: 'DELETE' })
            );

            await Promise.all(deletePromises);
            
            this.showToast(`${count} member(s) deleted successfully!`, 'success');
            this.selectedMemberIds.clear();
            this.currentMemberId = null;
            document.getElementById('no-member-selected').classList.remove('hidden');
            document.getElementById('member-details-form').classList.add('hidden');
            this.loadMembers();
        } catch (error) {
            console.error('Error deleting members:', error);
            this.showToast('Failed to delete some members', 'error');
        }
    }

    updateMemberCount() {
        const memberCount = document.getElementById('member-count');
        if (this.totalMembers === 0) {
            memberCount.textContent = 'No members found';
        } else if (this.totalMembers === 1) {
            memberCount.textContent = '1 member';
        } else {
            memberCount.textContent = `${this.totalMembers} members`;
        }
    }

    updatePagination() {
        const totalPages = Math.ceil(this.totalMembers / this.perPage);
        const pageInfo = document.getElementById('page-info');
        const prevBtn = document.getElementById('prev-page');
        const nextBtn = document.getElementById('next-page');

        pageInfo.textContent = `Page ${this.currentPage} of ${totalPages || 1}`;
        prevBtn.disabled = this.currentPage <= 1;
        nextBtn.disabled = this.currentPage >= totalPages;
    }

    showLoading(show) {
        const loading = document.getElementById('loading');
        const tableBody = document.getElementById('members-table-body');
        
        if (show) {
            loading.classList.remove('hidden');
            tableBody.innerHTML = '';
        } else {
            loading.classList.add('hidden');
        }
    }

    showToast(message, type = 'info') {
        const toastContainer = document.getElementById('toast-container');
        const toast = document.createElement('div');
        
        const alertClasses = {
            'success': 'alert-success',
            'error': 'alert-error',
            'warning': 'alert-warning',
            'info': 'alert-info'
        };

        const icons = {
            'success': 'fas fa-check-circle',
            'error': 'fas fa-exclamation-circle',
            'warning': 'fas fa-exclamation-triangle',
            'info': 'fas fa-info-circle'
        };

        toast.className = `alert ${alertClasses[type] || 'alert-info'} mb-4`;
        toast.innerHTML = `
            <i class="${icons[type] || 'fas fa-info-circle'}"></i>
            <span>${message}</span>
        `;

        toastContainer.appendChild(toast);

        // Auto-remove toast after 5 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 5000);
    }
}

// Initialize the members manager when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new MembersManager();
});
    </script>
</body>
</html>